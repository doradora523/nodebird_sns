{"ast":null,"code":"import { all, fork } from \"redux-saga/effects\";\n// take 는 1회용이기 때문에 while(true) {} 문으로 감싸준다. 하지만 직관적이지 않으므로 take 대신에 takeEvery를 사용한다.\n// takeLatest 는 클릭이 두번되었을 때 두 번 실행되지 않기 위해 마지막 것만 실행되도록 하는 effect 이다. (요청은 취소되지 않고 응답만 취소되므로 서버에는 두개가 저장됨(치명적단점))\n// takeLeading 은 첫번째 것만 실행되도록 하는 effect 이다.\n// throttle 은 시간제한을 두어 그 시간동안에 한번만 실행되도록 요청하는 것이다. (특수한 경우에 사용, 디도스 공격을 막을 때 좋음)\n\nimport userSaga from \"./user\";\nimport postSaga from './post';\nexport default function* rootSaga() {\n  // all 은 fork 나 call 을 동시에 실행시켜준다.\n  yield all([\n  // fork !== call\n  // fork 는 비동기 함수 호출 , call 은 동기 함수 호출\n  fork(userSaga), fork(postSaga)]);\n}","map":{"version":3,"names":["all","fork","userSaga","postSaga","rootSaga"],"sources":["/Users/a123/Desktop/study-react/NodeBird-SNS/frontend/sagas/index.js"],"sourcesContent":["import { all, fork } from \"redux-saga/effects\";\n// take 는 1회용이기 때문에 while(true) {} 문으로 감싸준다. 하지만 직관적이지 않으므로 take 대신에 takeEvery를 사용한다.\n// takeLatest 는 클릭이 두번되었을 때 두 번 실행되지 않기 위해 마지막 것만 실행되도록 하는 effect 이다. (요청은 취소되지 않고 응답만 취소되므로 서버에는 두개가 저장됨(치명적단점))\n// takeLeading 은 첫번째 것만 실행되도록 하는 effect 이다.\n// throttle 은 시간제한을 두어 그 시간동안에 한번만 실행되도록 요청하는 것이다. (특수한 경우에 사용, 디도스 공격을 막을 때 좋음)\n\nimport userSaga from \"./user\";\nimport postSaga from './post'\n\n\nexport default function* rootSaga() {\n  // all 은 fork 나 call 을 동시에 실행시켜준다.\n  yield all([\n    // fork !== call\n    // fork 는 비동기 함수 호출 , call 은 동기 함수 호출\n    fork(userSaga),\n    fork(postSaga),\n  ]);\n}\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,IAAI,QAAQ,oBAAoB;AAC9C;AACA;AACA;AACA;;AAEA,OAAOC,QAAQ,MAAM,QAAQ;AAC7B,OAAOC,QAAQ,MAAM,QAAQ;AAG7B,eAAe,UAAUC,QAAQ,GAAG;EAClC;EACA,MAAMJ,GAAG,CAAC;EACR;EACA;EACAC,IAAI,CAACC,QAAQ,CAAC,EACdD,IAAI,CAACE,QAAQ,CAAC,CACf,CAAC;AACJ"},"metadata":{},"sourceType":"module"}