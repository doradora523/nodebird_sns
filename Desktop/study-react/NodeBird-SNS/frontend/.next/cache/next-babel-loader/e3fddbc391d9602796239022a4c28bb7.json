{"ast":null,"code":"import axios from \"axios\";\nimport { all, fork, put, takeLatest, delay } from \"redux-saga/effects\";\nfunction logInAPI(data) {\n  return axios.post(\"/api/login\", data);\n}\nfunction* logIn(action) {\n  try {\n    // const result = yield call(logInAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: \"LOG_IN_SUCCESS\",\n      data: action.data\n    });\n  } catch (err) {\n    // dispatch === put\n    yield put({\n      type: \"LOG_IN_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: \"LOG_OUT_SUCCESS\",\n      data: result.data\n    });\n  } catch (err) {\n    // dispatch === put\n    yield put({\n      type: \"LOG_OUT_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\n\n// EventListener 같은 역할\nfunction* watchLogIn() {\n  yield takeLatest(\"LOG_IN_REQUEST\", logIn);\n}\nfunction* watchLogOut() {\n  yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\n}\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\n}","map":{"version":3,"names":["axios","all","fork","put","takeLatest","delay","logInAPI","data","post","logIn","action","type","err","response","logOutAPI","logOut","result","watchLogIn","watchLogOut","userSaga"],"sources":["/Users/a123/Desktop/study-react/NodeBird-SNS/frontend/sagas/user.js"],"sourcesContent":["import axios from \"axios\";\nimport { all, fork, put, takeLatest, delay } from \"redux-saga/effects\";\n\nfunction logInAPI(data) {\n  return axios.post(\"/api/login\", data);\n}\n\nfunction* logIn(action) {\n  try {\n    // const result = yield call(logInAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: \"LOG_IN_SUCCESS\",\n      data: action.data,\n    });\n  } catch (err) {\n    // dispatch === put\n    yield put({\n      type: \"LOG_IN_FAILURE\",\n      data: err.response.data,\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: \"LOG_OUT_SUCCESS\",\n      data: result.data,\n    });\n  } catch (err) {\n    // dispatch === put\n    yield put({\n      type: \"LOG_OUT_FAILURE\",\n      data: err.response.data,\n    });\n  }\n}\n\n// EventListener 같은 역할\nfunction* watchLogIn() {\n  yield takeLatest(\"LOG_IN_REQUEST\", logIn);\n}\n\nfunction* watchLogOut() {\n    yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\n}\n\nexport default function* userSaga() {\n  yield all([\n    fork(watchLogIn),\n    fork(watchLogOut),\n  ])\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,GAAG,EAAEC,IAAI,EAAEC,GAAG,EAAEC,UAAU,EAAEC,KAAK,QAAQ,oBAAoB;AAEtE,SAASC,QAAQ,CAACC,IAAI,EAAE;EACtB,OAAOP,KAAK,CAACQ,IAAI,CAAC,YAAY,EAAED,IAAI,CAAC;AACvC;AAEA,UAAUE,KAAK,CAACC,MAAM,EAAE;EACtB,IAAI;IACF;IACA,MAAML,KAAK,CAAC,IAAI,CAAC;IACjB,MAAMF,GAAG,CAAC;MACRQ,IAAI,EAAE,gBAAgB;MACtBJ,IAAI,EAAEG,MAAM,CAACH;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOK,GAAG,EAAE;IACZ;IACA,MAAMT,GAAG,CAAC;MACRQ,IAAI,EAAE,gBAAgB;MACtBJ,IAAI,EAAEK,GAAG,CAACC,QAAQ,CAACN;IACrB,CAAC,CAAC;EACJ;AACF;AAEA,SAASO,SAAS,GAAG;EACnB,OAAOd,KAAK,CAACQ,IAAI,CAAC,aAAa,CAAC;AAClC;AAEA,UAAUO,MAAM,GAAG;EACjB,IAAI;IACF;IACA,MAAMV,KAAK,CAAC,IAAI,CAAC;IACjB,MAAMF,GAAG,CAAC;MACRQ,IAAI,EAAE,iBAAiB;MACvBJ,IAAI,EAAES,MAAM,CAACT;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOK,GAAG,EAAE;IACZ;IACA,MAAMT,GAAG,CAAC;MACRQ,IAAI,EAAE,iBAAiB;MACvBJ,IAAI,EAAEK,GAAG,CAACC,QAAQ,CAACN;IACrB,CAAC,CAAC;EACJ;AACF;;AAEA;AACA,UAAUU,UAAU,GAAG;EACrB,MAAMb,UAAU,CAAC,gBAAgB,EAAEK,KAAK,CAAC;AAC3C;AAEA,UAAUS,WAAW,GAAG;EACpB,MAAMd,UAAU,CAAC,iBAAiB,EAAEW,MAAM,CAAC;AAC/C;AAEA,eAAe,UAAUI,QAAQ,GAAG;EAClC,MAAMlB,GAAG,CAAC,CACRC,IAAI,CAACe,UAAU,CAAC,EAChBf,IAAI,CAACgB,WAAW,CAAC,CAClB,CAAC;AACJ"},"metadata":{},"sourceType":"module"}