{"ast":null,"code":"import axios from \"axios\";\nimport { all, fork, put, takeLatest, delay } from \"redux-saga/effects\";\nimport { LOG_IN_SUCCESS } from \"../reducers/user\";\nfunction logInAPI(data) {\n  return axios.post(\"/api/login\", data);\n}\nfunction* logIn(action) {\n  try {\n    // const result = yield call(logInAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    // dispatch === put\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    // dispatch === put\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\n// EventListener 같은 역할\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\n}","map":{"version":3,"names":["axios","all","fork","put","takeLatest","delay","LOG_IN_SUCCESS","logInAPI","data","post","logIn","action","type","err","LOG_IN_FAILURE","error","response","logOutAPI","logOut","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","watchLogIn","LOG_IN_REQUEST","watchLogOut","LOG_OUT_REQUEST","userSaga"],"sources":["/Users/a123/Desktop/study-react/NodeBird-SNS/frontend/sagas/user.js"],"sourcesContent":["import axios from \"axios\";\nimport { all, fork, put, takeLatest, delay } from \"redux-saga/effects\";\nimport { LOG_IN_SUCCESS } from \"../reducers/user\";\n\nfunction logInAPI(data) {\n  return axios.post(\"/api/login\", data);\n}\n\nfunction* logIn(action) {\n  try {\n    // const result = yield call(logInAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data,\n    });\n  } catch (err) {\n    // dispatch === put\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS,\n    });\n  } catch (err) {\n    // dispatch === put\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\n// EventListener 같은 역할\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,GAAG,EAAEC,IAAI,EAAEC,GAAG,EAAEC,UAAU,EAAEC,KAAK,QAAQ,oBAAoB;AACtE,SAASC,cAAc,QAAQ,kBAAkB;AAEjD,SAASC,QAAQ,CAACC,IAAI,EAAE;EACtB,OAAOR,KAAK,CAACS,IAAI,CAAC,YAAY,EAAED,IAAI,CAAC;AACvC;AAEA,UAAUE,KAAK,CAACC,MAAM,EAAE;EACtB,IAAI;IACF;IACA,MAAMN,KAAK,CAAC,IAAI,CAAC;IACjB,MAAMF,GAAG,CAAC;MACRS,IAAI,EAAEN,cAAc;MACpBE,IAAI,EAAEG,MAAM,CAACH;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOK,GAAG,EAAE;IACZ;IACA,MAAMV,GAAG,CAAC;MACRS,IAAI,EAAEE,cAAc;MACpBC,KAAK,EAAEF,GAAG,CAACG,QAAQ,CAACR;IACtB,CAAC,CAAC;EACJ;AACF;AAEA,SAASS,SAAS,GAAG;EACnB,OAAOjB,KAAK,CAACS,IAAI,CAAC,aAAa,CAAC;AAClC;AAEA,UAAUS,MAAM,GAAG;EACjB,IAAI;IACF;IACA,MAAMb,KAAK,CAAC,IAAI,CAAC;IACjB,MAAMF,GAAG,CAAC;MACRS,IAAI,EAAEO;IACR,CAAC,CAAC;EACJ,CAAC,CAAC,OAAON,GAAG,EAAE;IACZ;IACA,MAAMV,GAAG,CAAC;MACRS,IAAI,EAAEQ,eAAe;MACrBL,KAAK,EAAEF,GAAG,CAACG,QAAQ,CAACR;IACtB,CAAC,CAAC;EACJ;AACF;;AAEA;AACA,UAAUa,UAAU,GAAG;EACrB,MAAMjB,UAAU,CAACkB,cAAc,EAAEZ,KAAK,CAAC;AACzC;AAEA,UAAUa,WAAW,GAAG;EACtB,MAAMnB,UAAU,CAACoB,eAAe,EAAEN,MAAM,CAAC;AAC3C;AAEA,eAAe,UAAUO,QAAQ,GAAG;EAClC,MAAMxB,GAAG,CAAC,CAACC,IAAI,CAACmB,UAAU,CAAC,EAAEnB,IAAI,CAACqB,WAAW,CAAC,CAAC,CAAC;AAClD"},"metadata":{},"sourceType":"module"}